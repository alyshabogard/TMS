%% Recruitment Curve & MVC Analysis

clear; clc; close all;

% ---------------------------
% AUTOMATED DATA IMPORT
% ---------------------------
% Find all .xlsx files in the directory
matfiles = dir('*.xlsx');
N = length(matfiles);

% Preallocate structs for efficiency
RC = struct('name', '', 'data', []);
MVC = struct('name', '', 'data', []);
bgNoise = [];

% Load data dynamically
for i = 1:N
    filename = matfiles(i).name;
    data = importdata(filename);
    
    if contains(filename, 'RC')
        RC(i).name = filename;
        RC(i).data = data.data;
        
        % Compute background noise
        bgNoise(i) = min(data.data(:,3)); 
        
    elseif contains(filename, 'MVC')
        MVC(i).name = filename;
        MVC(i).data = data.data;
    end
end

% ---------------------------
% COMPILE MVC DATA
% ---------------------------
IDs = extractBetween({MVC.name}, 2, 3);
Pre_MVC = cellfun(@(x) x(:,2)', {MVC(contains({MVC.name}, 'pre')).data}, 'UniformOutput', false);
Post_MVC = cellfun(@(x) x(:,2)', {MVC(contains({MVC.name}, 'post')).data}, 'UniformOutput', false);

Pre_MVCmean = mean(cell2mat(Pre_MVC), 2);
Post_MVCmean = mean(cell2mat(Post_MVC), 2);

% Save MVC data to CSV
M = table(IDs', Pre_MVCmean, Post_MVCmean);
writetable(M, 'MVC.csv');

% ---------------------------
% COMPUTE RECRUITMENT CURVE METRICS
% ---------------------------
numSubjects = length(RC) / 2;
preResults = struct();
postResults = struct();

for i = 1:numSubjects
    preResults(i) = computeRecruitmentCurve(RC(i).data);
    postResults(i) = computeRecruitmentCurve(RC(i + numSubjects).data);
end

% Save recruitment curve results
T = struct2table(preResults);
writetable(T, 'Pre_RC_Results.csv');
T = struct2table(postResults);
writetable(T, 'Post_RC_Results.csv');

% ---------------------------
% PLOTTING
% ---------------------------
graphics = questdlg("Do you want to generate plots?", "Plotter", "Yes", "No", "No");
plotter = strcmp(graphics, "Yes");

if plotter
    for i = 1:numSubjects
        figure;
        hold on;
        prePlot = GraphRC(preResults(i).data, "Pre");
        postPlot = GraphRC(postResults(i).data, "Post");
        legend([prePlot, postPlot], "Pre", "Post");
        title(sprintf("Subject %s: Pre vs Post Recruitment Curve", IDs{i}));
    end
end

% ---------------------------
% FUNCTION: Compute Recruitment Curve Metrics
% ---------------------------
function result = computeRecruitmentCurve(T)
    % Background subtraction
    bg = min(T(:,3));
    T(:,3) = T(:,3) - bg;

    % Extract MEP values
    MEPmax = max(T(:,3));
    MEP100 = mean(T(T(:,2) == 100, 3));
    MEP120 = mean(T(T(:,2) == 120, 3));
    MEP140 = mean(T(T(:,2) == 140, 3));

    % Boltzmann fitting
    k = MEPmax / (4 * max(diff(T(:,3))));
    s = 1:0.01:6;
    s50 = 4;  % Default threshold
    y = MEPmax ./ (1 + exp((s50 - s) ./ k));

    % Area under curve
    auc = trapz(s, y);

    % Store results
    result = struct('MEPmax', MEPmax, 'MEP100', MEP100, 'MEP120', MEP120, 'MEP140', MEP140, 'AUC', auc, 'data', T);
end

% ---------------------------
% FUNCTION: Plot Recruitment Curve
% ---------------------------
function p = GraphRC(T, label)
    mV = T(:,3);
    scatter(T(:,2), mV, 'filled');
    hold on;

    % Boltzmann curve fitting
    MEPmax = max(mV);
    k = MEPmax / (4 * max(diff(mV)));
    s = 1:0.01:6;
    s50 = 4;
    y = MEPmax ./ (1 + exp((s50 - s) ./ k));

    % Plot curve
    p = plot(s, y, 'LineWidth', 2);
    xlabel('% RMT');
    ylabel('MEP Amplitude (mV)');
    title(label);
end
